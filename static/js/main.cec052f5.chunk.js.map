{"version":3,"sources":["image/favicon.ico","image/HackNSlash-text.svg","theme/colors.js","components/Button.js","components/CharacterForm.js","components/InitiativeList.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","theme","white","blue","red","darkerRed","ButtonStyled","styled","button","_templateObject","colors","props","uppercase","css","_templateObject2","Button","_ref","children","Object","objectWithoutProperties","react_default","a","createElement","assign","FormComponent","form","CharacterForm_templateObject","InputComponent","input","CharacterForm_templateObject2","CharacterForm","handleSubmit","formik_esm","initialValues","name","initiative","howMany","onSubmit","render","type","placeholder","value","values","onChange","handleChange","autoFocus","required","components_Button","defaultProps","undefined","Table","table","InitiativeList_templateObject","TableRow","tr","InitiativeList_templateObject2","TableCell","td","_templateObject3","align","_templateObject4","isActive","_templateObject5","TurnIcon","img","_templateObject6","InitiativeList","characters","turn","removeCharacter","orderedInitiative","sort","b","map","character","index","key","id","src","icon","onClick","StyledHeader","header","Header_templateObject","Header","logo","alt","height","AppWrapper","section","App_templateObject","AppCard","div","App_templateObject2","AppCardHeader","App_templateObject3","AppCardBody","App_templateObject4","App","state","actions","_this","numberOfCharacters","Array","newCharacters","from","nanoid","length","concat","setState","toConsumableArray","resetForm","handleNextTurn","_this$state","nextTurn","removingCharacterId","newCharactersList","filter","_this$state2","this","components_Header","components_CharacterForm","Component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cec052f5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/favicon.1321d1ea.ico\";","module.exports = __webpack_public_path__ + \"static/media/HackNSlash-text.9eafeab9.svg\";","const theme = {\r\n  white: '#fff',\r\n  blue: '#082c4e',\r\n  red: '#c41d1f',\r\n  darkerRed: '#ff1419',\r\n};\r\n\r\nexport default theme;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, { css } from 'styled-components';\r\n\r\nimport colors from '../theme/colors';\r\n\r\nconst ButtonStyled = styled.button`\r\n  padding: 8px;\r\n  font-weight: 600;\r\n  border-radius: 3px;\r\n  color: ${colors.blue};\r\n  background-color: ${colors.white};\r\n  cursor: pointer;\r\n  border: 1px solid ${colors.blue};\r\n\r\n  ${props => props.uppercase && css`\r\n    text-transform: uppercase;\r\n  `}\r\n`;\r\n\r\nconst Button = ({\r\n  uppercase, children, ...props\r\n}) => ((\r\n  <ButtonStyled\r\n    uppercase={uppercase}\r\n    {...props}\r\n  >\r\n    {children}\r\n  </ButtonStyled>\r\n));\r\n\r\n\r\nButton.propTypes = {\r\n  uppercase: PropTypes.bool,\r\n  children: PropTypes.node,\r\n  onClick: PropTypes.func,\r\n  type: PropTypes.string,\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Formik } from 'formik';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from './Button';\r\n\r\nconst FormComponent = styled.form`\r\n  display: grid;\r\n  grid-template-column: 1fr;\r\n`;\r\n\r\nconst InputComponent = styled.input`\r\n  padding: 8px;\r\n  margin-bottom: 8px;\r\n  border-radius: 3px;\r\n  border: 1px solid #DFE3E8;\r\n`;\r\n\r\nconst CharacterForm = ({ handleSubmit }) => (\r\n  <Formik\r\n    initialValues={{ name: '', initiative: '', howMany: '' }}\r\n    onSubmit={handleSubmit}\r\n    render={props => (\r\n      <FormComponent onSubmit={props.handleSubmit}>\r\n        <InputComponent\r\n          type=\"number\"\r\n          name=\"howMany\"\r\n          placeholder=\"How many\"\r\n          value={props.values.howMany}\r\n          onChange={props.handleChange}\r\n          autoFocus\r\n        />\r\n        <InputComponent\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Name\"\r\n          value={props.values.name}\r\n          onChange={props.handleChange}\r\n          required\r\n        />\r\n        <InputComponent\r\n          type=\"number\"\r\n          name=\"initiative\"\r\n          placeholder=\"Initiative roll\"\r\n          value={props.values.initiative}\r\n          onChange={props.handleChange}\r\n          required\r\n        />\r\n        <Button uppercase type=\"submit\">add</Button>\r\n      </FormComponent>\r\n    )}\r\n  />\r\n);\r\n\r\nCharacterForm.propTypes = {\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  handleChange: PropTypes.func,\r\n  values: PropTypes.object,\r\n};\r\n\r\nCharacterForm.defaultProps = {\r\n  handleChange: undefined,\r\n  values: {},\r\n};\r\n\r\nexport default CharacterForm;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, { css } from 'styled-components';\r\n\r\nimport Button from './Button';\r\nimport icon from '../image/favicon.ico';\r\n\r\nconst Table = styled.table`\r\n  width: 100%;\r\n  text-align: left;\r\n  border-collapse: collapse;\r\n`;\r\n\r\nconst TableRow = styled.tr`\r\n  :not(:last-child) {\r\n    border-bottom: 1px solid #DFE3E8;\r\n  }\r\n`;\r\n\r\nconst TableCell = styled.td`\r\n  padding: 8px 4px;\r\n\r\n  ${props => props.align && css`text-align: ${props.align};`}\r\n  ${props => props.isActive && css`font-weight: bold;`}\r\n`;\r\n\r\nconst TurnIcon = styled.img`\r\n  position: relative;\r\n  top: 2px;\r\n  margin-right: 4px;\r\n`;\r\n\r\nexport default function InitiativeList({ characters, turn, removeCharacter }) {\r\n  const orderedInitiative = characters.sort((a, b) => b.initiative - a.initiative);\r\n\r\n  return (\r\n    <Table>\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Initiative</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {orderedInitiative.map((character, index) => (\r\n          <TableRow key={character.id}>\r\n            <TableCell isActive={turn === index}>\r\n              {turn === index && (\r\n                <TurnIcon src={icon} />\r\n              )}\r\n              <span>{character.name}</span>\r\n            </TableCell>\r\n            <TableCell>{character.initiative}</TableCell>\r\n            <TableCell align=\"right\">\r\n              <Button type=\"button\" onClick={() => removeCharacter(character.id)} uppercase>Remove</Button>\r\n            </TableCell>\r\n          </TableRow>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nInitiativeList.propTypes = {\r\n  characters: PropTypes.array.isRequired,\r\n  turn: PropTypes.number.isRequired,\r\n  removeCharacter: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport logo from '../image/HackNSlash-text.svg';\r\nimport colors from '../theme/colors';\r\n\r\nconst StyledHeader = styled.header`\r\n  background-color: ${colors.white};\r\n  padding: 8px;\r\n  margin-bottom: 24px;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Header = () => (\r\n  <StyledHeader>\r\n    <img src={logo} alt=\"Hack and Slash logo\" height=\"50\" />\r\n  </StyledHeader>\r\n);\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport nanoid from 'nanoid';\r\nimport styled from 'styled-components';\r\n\r\nimport CharacterForm from './components/CharacterForm';\r\nimport InitiativeList from './components/InitiativeList';\r\nimport Header from './components/Header';\r\nimport Button from './components/Button';\r\n\r\nconst AppWrapper = styled.section`\r\n  display: block;\r\n  overflow: auto;\r\n  min-height: 100vh;\r\n  background-color: #F4F6F8;\r\n  padding-bottom: 16px;\r\n`;\r\n\r\nconst AppCard = styled.div`\r\n  width: 400px;\r\n  max-width: 90%;\r\n  background-color: #fff;\r\n  border-radius: 3px;\r\n  margin: 0 auto;\r\n  box-shadow: 0 1px 2px 0 rgba(63,63,68,.15);\r\n  margin-bottom: 8px;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst AppCardHeader = styled.div`\r\n  background-color: #F9FAFB;\r\n  padding: 16px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst AppCardBody = styled.div`\r\n  padding: 16px;\r\n`;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    characters: [],\r\n    turn: 0,\r\n  }\r\n\r\n  handleSubmit = (values, actions) => {\r\n    const { howMany, name, initiative } = values;\r\n    if (!(values.name && values.initiative)) {\r\n      return;\r\n    }\r\n\r\n    const { characters } = this.state;\r\n\r\n    const numberOfCharacters = Array(howMany || 1);\r\n    const newCharacters = Array.from(numberOfCharacters, (value, index) => ({\r\n      id: nanoid(),\r\n      name: numberOfCharacters.length > 1 ? `${name} ${index + 1}` : name,\r\n      initiative,\r\n    }));\r\n\r\n    this.setState({\r\n      characters: [\r\n        ...characters,\r\n        ...newCharacters,\r\n      ],\r\n    });\r\n\r\n    actions.resetForm();\r\n  }\r\n\r\n  handleNextTurn = () => {\r\n    const { characters, turn } = this.state;\r\n    const nextTurn = characters.length - 1 > turn ? turn + 1 : 0;\r\n    this.setState({ turn: nextTurn });\r\n  }\r\n\r\n  removeCharacter = (removingCharacterId) => {\r\n    const { characters } = this.state;\r\n    const newCharactersList = characters.filter(character => character.id !== removingCharacterId);\r\n    this.setState({\r\n      characters: [\r\n        ...newCharactersList,\r\n      ],\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { characters, turn } = this.state;\r\n\r\n    return (\r\n      <AppWrapper>\r\n        <Header />\r\n        <AppCard>\r\n          <AppCardHeader>\r\n            <p>\r\n              <strong>1 - </strong>\r\n              <span>Add your characters.</span>\r\n            </p>\r\n          </AppCardHeader>\r\n          <AppCardBody>\r\n            <CharacterForm handleSubmit={this.handleSubmit} />\r\n          </AppCardBody>\r\n        </AppCard>\r\n        {characters.length > 0 && (\r\n          <AppCard>\r\n            <AppCardHeader>\r\n              <p>\r\n                <strong>2 - </strong>\r\n                <span>Prepare for battle!</span>\r\n              </p>\r\n              <Button uppercase type=\"button\" onClick={this.handleNextTurn}>Next turn</Button>\r\n            </AppCardHeader>\r\n            <AppCardBody>\r\n              <InitiativeList\r\n                characters={characters}\r\n                turn={turn}\r\n                removeCharacter={this.removeCharacter}\r\n              />\r\n            </AppCardBody>\r\n          </AppCard>\r\n        )}\r\n      </AppWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}