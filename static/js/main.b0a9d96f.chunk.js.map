{"version":3,"sources":["components/Button.js","components/CharacterForm.js","components/InitiativeList.js","App.js","serviceWorker.js","index.js"],"names":["ButtonStyled","styled","button","_templateObject","props","uppercase","css","_templateObject2","Button","_ref","children","onClick","type","react_default","a","createElement","Fragment","FormComponent","form","CharacterForm_templateObject","InputComponent","input","CharacterForm_templateObject2","CharacterForm","handleSubmit","formik_esm","initialValues","name","initiative","howMany","onSubmit","render","placeholder","value","values","onChange","handleChange","autoFocus","required","components_Button","defaultProps","undefined","InitiativeList","characters","turn","removeCharacter","orderedInitiative","sort","b","map","character","index","key","id","style","backgroundColor","App","state","actions","_this","numberOfCharacters","Array","newCharacters","from","nanoid","length","concat","setState","Object","toConsumableArray","resetForm","handleNextTurn","_this$state","nextTurn","removingCharacterId","newCharactersList","filter","_this$state2","this","components_CharacterForm","Component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0a9d96f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled, { css } from 'styled-components';\n\nconst ButtonStyled = styled.button`\n  padding: 10px;\n  font-weight: 600;\n\n  ${props => props.uppercase && css`\n    text-transform: uppercase;\n  `}\n`;\n\nconst Button = ({\n  uppercase, children, onClick, type,\n}) => ((\n  <React.Fragment>\n    <ButtonStyled\n      uppercase={uppercase}\n      onClick={onClick}\n      type={type}\n    >\n      {children}\n    </ButtonStyled>\n  </React.Fragment>\n));\n\n\nButton.propTypes = {\n  uppercase: PropTypes.bool,\n  children: PropTypes.node,\n  onClick: PropTypes.func,\n  type: PropTypes.string,\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport styled from 'styled-components';\n\nimport Button from './Button';\n\nconst FormComponent = styled.form`\n  display: grid;\n  grid-template-column: 1fr;\n`;\n\nconst InputComponent = styled.input`\n  padding: 10px;\n`;\n\nconst CharacterForm = ({ handleSubmit }) => (\n  <Formik\n    initialValues={{ name: '', initiative: '', howMany: '' }}\n    onSubmit={handleSubmit}\n    render={props => (\n      <FormComponent onSubmit={props.handleSubmit}>\n        <InputComponent\n          type=\"number\"\n          name=\"howMany\"\n          placeholder=\"How many\"\n          value={props.values.howMany}\n          onChange={props.handleChange}\n          autoFocus\n        />\n        <InputComponent\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Name\"\n          value={props.values.name}\n          onChange={props.handleChange}\n          required\n        />\n        <InputComponent\n          type=\"number\"\n          name=\"initiative\"\n          placeholder=\"Initiative roll\"\n          value={props.values.initiative}\n          onChange={props.handleChange}\n          required\n        />\n        <Button uppercase type=\"submit\">add</Button>\n      </FormComponent>\n    )}\n  />\n);\n\nCharacterForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  handleChange: PropTypes.func,\n  values: PropTypes.object,\n};\n\nCharacterForm.defaultProps = {\n  handleChange: undefined,\n  values: {},\n};\n\nexport default CharacterForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function InitiativeList({ characters, turn, removeCharacter }) {\n  const orderedInitiative = characters.sort((a, b) => b.initiative - a.initiative);\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Initiative</th>\n        </tr>\n      </thead>\n      <tbody>\n        {orderedInitiative.map((character, index) => (\n          <tr key={character.id} style={turn === index ? { backgroundColor: '#f0f' } : null}>\n            <td>{character.name}</td>\n            <td>{character.initiative}</td>\n            <td><button type=\"button\" onClick={() => removeCharacter(character.id)}>x</button></td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nInitiativeList.propTypes = {\n  characters: PropTypes.array.isRequired,\n  turn: PropTypes.number.isRequired,\n  removeCharacter: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport nanoid from 'nanoid';\n\nimport CharacterForm from './components/CharacterForm';\nimport InitiativeList from './components/InitiativeList';\n\nclass App extends Component {\n  state = {\n    characters: [],\n    turn: 0,\n  }\n\n  handleSubmit = (values, actions) => {\n    const { howMany, name, initiative } = values;\n    if (!(values.name && values.initiative)) {\n      return;\n    }\n\n    const { characters } = this.state;\n\n    const numberOfCharacters = Array(howMany || 1);\n    const newCharacters = Array.from(numberOfCharacters, (value, index) => ({\n      id: nanoid(),\n      name: numberOfCharacters.length > 1 ? `${name} ${index + 1}` : name,\n      initiative,\n    }));\n\n    this.setState({\n      characters: [\n        ...characters,\n        ...newCharacters,\n      ],\n    });\n\n    actions.resetForm();\n  }\n\n  handleNextTurn = () => {\n    const { characters, turn } = this.state;\n    const nextTurn = characters.length - 1 > turn ? turn + 1 : 0;\n    this.setState({ turn: nextTurn });\n  }\n\n  removeCharacter = (removingCharacterId) => {\n    const { characters } = this.state;\n    const newCharactersList = characters.filter(character => character.id !== removingCharacterId);\n    this.setState({\n      characters: [\n        ...newCharactersList,\n      ],\n    });\n  }\n\n  render() {\n    const { characters, turn } = this.state;\n\n    return (\n      <React.Fragment>\n        <CharacterForm handleSubmit={this.handleSubmit} />\n        <button onClick={this.handleNextTurn} type=\"button\">next</button>\n        <InitiativeList\n          characters={characters}\n          turn={turn}\n          removeCharacter={this.removeCharacter}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}